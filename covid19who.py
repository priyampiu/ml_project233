# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1re3yc_PK6wpy3Ss71kOG9NRDmUh9Kpf6
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose # Import the missing module
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error

# Remove the leading space in the file path
df = pd.read_csv('/WHO COVID-19 cases.csv')

# Display the first few rows
df.head()

# Get information about the dataset
df.info()

# Generate descriptive statistics
df.describe()

# Fill missing values (if any)
df['New_cases'] = df['New_cases'].fillna(df['New_cases'].mean())

# Assuming 'df' is your DataFrame and 'New_cases' is the column with your time series data
result = seasonal_decompose(df['New_cases'], model='additive', period=12)  # or model='multiplicative'

# Access the components
result.trend
result.seasonal
result.resid

# Plot the decomposed components
result.plot()
plt.show()

# Create seasonal differencing
df['New_cases_diff'] = df['New_cases'].diff(periods=12)  # Assuming monthly seasonality

train_size = int(len(df) * 0.8)
train_data = df.iloc[:train_size]
test_data = df.iloc[train_size:]

# Specify SARIMAX parameters (adjust based on EDA and model diagnostics)
model = SARIMAX(train_data['New_cases_diff'], order=(5,1,0), seasonal_order=(1,0,1,12))

# Fit the model
model_fit = model.fit()

# Make predictions
predictions = model_fit.forecast(steps=len(test_data))

# Invert the differencing (if applicable)
predictions = predictions.cumsum() + train_data['New_cases'].iloc[-1]

# Calculate mean squared error
mse = mean_squared_error(test_data['New_cases'], predictions)
print("Mean Squared Error:", mse)

# Visualize actual vs. predicted values
plt.plot(np.arange(len(test_data)), test_data['New_cases']) # Access the 'New_cases' column of the DataFrame
plt.plot(predictions, color='red')
plt.show()